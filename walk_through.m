%% An expample of evolution_0mut_simplified.m

% INPUTS
lineage = 1e4;  
% number of genotypes of the population
t_evo = 24;  
% total number of generations grown
cell_num_ini = 1e2*ones(lineage,1);  
% a vector of initial cell number of each genotype at generation 0
x_ini = random('Normal',0,0.2, [lineage,1]);  
% a vector of the fitness of each genotype. Here is a Gaussian distribution 
% with mean = 0 and standard devistion = 0.2
noise_option = 1;  
% option of whether cell growth noise is simulated. growth noise is 
% simulated in this example

% Execute
[ file_name ] = evolution_0mut_simplified(lineage, t_evo, cell_num_ini, ...
    x_ini, noise_option);
% file_name: the name of the file generated, 
% 'data_evo_simu_0mut_simplified_********-*********.mat' 
% when 'format' is set to be 'mat', and 
% 'data_evo_simu_0mut_simplified_********-*********.csv'
%  when 'format' is set to be 'csv'



%% An expample of evolution_0mut_complex.m

% INPUTS
lineage = 1e4;  
% number of genotypes of the population
t_evo = 24;  
% total number of generations grown
cell_num_ini = 1e2*ones(lineage,1);  
% a vector of initial cell number of each genotype at generation 0
x_ini = random('Normal',0,0.15, [lineage,1]);  
% a vector of the fitness of each genotype. Here, this is a Gaussian distribution 
% with mean = 0 and standard devistion = 0.15
read_depth_average = 100;  
% average number of reads per genotype per sequencing
deltat = 8;  
% number of generations between two successive cell transfers
noise_option = [1,1,1,1,1];  
% a vector of whether to simulate each of five types of noise (cell growth, bottleneck 
% transfer, DNA extraction, PCR, sequencing). Here, all five types of 
% noise are simulated.
                             
% Execute
[ file_name ] = evolution_0mut_complex(lineage, t_evo, cell_num_ini, ...
    x_ini, deltat, read_depth_average, noise_option);
% file_name: the name of the file generated, 
% 'data_evo_simu_0mut_complex_********-*********.mat' 
% when 'format' is set to be 'mat', and 
% 'data_evo_simu_0mut_complex_********-*********.csv'
%  when 'format' is set to be 'csv'
% ----------------------------------------------------------------------------------------------------



%% An expample of Fit-Seq.m

% INPUTS
% Two way of loading the inputs. The first way is loading '.csv' files that 
% generated by running evolution_0mut_complex.m at the previouse step, and 
% the second way is loading the '.csv' file (Simulated-Pooled-Growth_Reads.csv) 
% that we provided

% Way 1 of loading inputs
t_seq_vec = csvread('data_evo_simu_0mut_complex_********-*********_SeuqencedTimepoints.csv');
% a vector of all sequencing time points
BC_num_mat_original = csvread('data_evo_simu_0mut_complex_********-*********_Reads.csv');
% a matrix of the read number of each genotype at each sequencing time point
effective_cell_depth = csvread('data_evo_simu_0mut_complex_********-*********_EffectiveCellDepth.csv');
% a vector of the effective cell number (number of cells transferred at the bottleneck) 
% of population at each sequencing time point
deltat_temp = textscan(fopen('data_evo_simu_0mut_complex_********-*********_Paramaters.csv'),...
    '%*f %*f %*f %*f %f %*f %*s','Delimiter',',','headerLines', 1);
deltat = deltat_temp{1}(1);   
% number of generations between two succesive cell transfers


% Way 2 of loading inputs
t_seq_vec = 0:8:24;
% a vector of all sequencing time points
BC_num_mat_original = csvread('Simulated-Pooled-Growth_Reads.csv');
% a matrix of read number of each genotype at each sequencing time point,
effective_cell_depth = [1000000, 999300, 999040, 999350];
% a vector of the effective cell number (number of cells transferred at the 
% bottleneck) of population at each sequencing time point
deltat = 8;
% number of generations between two succesive cell transfers


% Execute
[file_name, x_estimate_result, r_estimate_result, x_mean_est] = ...
    FitSeq(t_seq_vec, BC_num_mat_original, effective_cell_depth, deltat,'format','mat');

% file_name: name of the file generated. 'Fit-Seq_result_********-*********.mat'
% when 'format' is set to be 'mat', and 'Fit-Seq_result_********-*********.csv' 
% when 'format' is set to be 'csv'
%
% x_estimate_result: a vector of the estimated fitness of each genotype
%
% r_estimate_result: a matrix of the estimated read number of each genotype 
% at each sequencing time point, size = genotypes * length(t_seq_vec)
%
% x_mean_est: a vector of the estimated mean fitness of the population at 
% each sequencing time point, size = 1 * length(t_seq_vec)
